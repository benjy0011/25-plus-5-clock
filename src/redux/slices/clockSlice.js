import { createSlice } from '@reduxjs/toolkit';


// Inital state of the clock
const initialState = {
  breakLength: 5, // in minutes
  sessionLength: 25, // in minutes
  timerLabel: "Session",
  timeLeft: 25 * 60, // in seconds
  isRunning: false,
};

// Creating a slice for managing the clock state
const clockSlice = createSlice({
  name: "clock", // Name of the slice
  initialState, // State
  reducers: { // Reducer functions to manage state transitions

    incrementBreak: (state) => {
      if (state.breakLength < 60) state.breakLength++;
    },

    decrementBreak: (state) => {
      if (state.breakLength > 1) state.breakLength--;
    },

    incrementSession: (state) => {
      if (state.sessionLength < 60) {
        state.sessionLength++;
        if (!state.isRunning) state.timeLeft = state.sessionLength * 60;
      }
    },

    decrementSession: (state) => {
      if (state.sessionLength > 1) {
        state.sessionLength--;
        if (!state.isRunning) state.timeLeft = state.sessionLength * 60;
      }
    },

    toggleTimer: (state) => {
      state.isRunning = !state.isRunning;
    },

    reset: () => initialState,

    tick: (state) => {
      if (state.timeLeft > 0) {
        state.timeLeft--;
      } else if (state.timeLeft === 0) {
        // Switch between "Session" and "Break" when timer reaches 0.
        const beep = document.getElementById("beep");
        if (beep) beep.play();

        state.timerLabel = state.timerLabel === "Session" ? "Break" : "Session";
        state.timeLeft = 
          (state.timerLabel === "Session"
            ? state.sessionLength
            : state.breakLength ) * 60;
      }
    },

  },

});

// Exporting actions and reducer generated by createSlice.
export const {
  incrementBreak,
  decrementBreak,
  incrementSession,
  decrementSession,
  toggleTimer,
  reset,
  tick,
} = clockSlice.actions;

export default clockSlice.reducer;